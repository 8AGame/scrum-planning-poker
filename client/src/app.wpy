<style lang="less">
@import './style/weui.less';
@import './style/style.less';
</style>

<script>
import wepy from 'wepy';
import 'wepy-async-function';
import { setStore } from 'wepy-redux';
import configStore from './store';
import { defaultLang, LANG_KEY, TOKEN_KEY } from '@/utils/utils';
import T from '@/utils/i18n';
import locales from '@/utils/locales';

const store = configStore();
setStore(store);

export default class extends wepy.app {
  config = {
    pages: ['pages/index', 'pages/welcome'],
    window: {
      backgroundTextStyle: 'light',
      backgroundColor: '#f8f8fa',
      backgroundColorTop: '#f8f8fa',
      backgroundColorBottom: '#f8f8fa',
      navigationBarBackgroundColor: '#0678C1',
      navigationBarTitleText: 'Scrum敏捷估算',
      navigationBarTextStyle: 'white'
    }
  };

  globalData = {
    userInfo: null,
    token: null,
    lang: defaultLang
  };

  constructor() {
    super();
    this.use('promisify');
    this.use('requestfix');
    this.intercept('request', {
      config(p) {
        p.url = wepy.$appConfig.apiUrl + p.url;
        return p;
      }
    });
  }

  onLaunch() {
    this.registerLocales();
    this.globalData.token = wepy.getStorageSync(TOKEN_KEY);
  }

  async login() {
    try {
      const { code } = await wepy.login();
      const { iv, encryptedData } = await wepy.getUserInfo();
      const { data } = await wepy.request({
        url: '/users/wxLogin',
        method: 'POST',
        data: {
          code,
          encryptedData,
          iv
        }
      });
      wepy.setStorageSync(TOKEN_KEY, data);
      this.globalData.token = data;
    } catch (error) {
      console.error(error);
    }
  }

  registerLocales() {
    T.registerLocales(locales);
    let lang = wepy.getStorageSync(LANG_KEY);
    if (!lang) {
      lang = this.getSystemLang();
      wepy.setStorageSync(LANG_KEY, lang);
    }
    this.globalData.lang = lang;
    T.setLocale(this.globalData.lang);
    wepy.T = T;
  }

  getSystemLang() {
    try {
      const { language } = wepy.getSystemInfoSync();
      if (language !== defaultLang) {
        return 'en';
      } else {
        return defaultLang;
      }
    } catch (error) {
      console.error(error);
      return defaultLang;
    }
  }

  async checkForUpdates() {
    const updateManager = wx.getUpdateManager();
    updateManager.onCheckForUpdate(({ hasUpdate }) => {
      if (hasUpdate) {
        updateManager.onUpdateReady(function() {
          wx.showModal({
            title: '更新提示',
            content: '新版本已经准备好，是否重启应用？',
            success: function(res) {
              if (res.confirm) {
                updateManager.applyUpdate();
              }
            }
          });
        });

        updateManager.onUpdateFailed(function() {
          wx.showModal({
            title: '更新版本失败'
          });
        });
      }
    });
  }
}
</script>
