<style type="less">
.welcome-bg {
  position: absolute;
  top: -200rpx;
  bottom: 0;
  left: 0;
  right: 0;
  background-color: #0678c1;
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  overflow: hidden;
}

.welcome-bg cover-image {
  width: 57vw;
  height: 105vw;
  z-index: 1;
}

.welcome-bg-circle {
  width: 120vw;
  height: 120vw;
  background-color: #fff;
  position: absolute;
  left: -10vw;
  top: calc(~'105vw + 200rpx');
  border-radius: 60vw;
}

.welcome-title {
  color: #fff;
  text-align: center;
  font-size: 32rpx;
  margin-bottom: 40rpx;
  margin-left: 80rpx;
  margin-right: 80rpx;
}

.welcome-btn-area {
  position: absolute;

  &-link {
    color: #0678c1;
    background: none;
    &:after {
      border: none;
    }
  }
}
</style>
<template>
<view class="page">
  <view class="container">
    <view class="page-body">
      <view class="welcome-bg">
        <view class="welcome-title">{{t.text}}</view>
        <cover-image src="../images/cover.png"></cover-image>
        <view class="welcome-bg-circle"></view>
      </view>
      <view class="welcome-btn-area btn-area" style="bottom: {{btnBottom}}">
        <button type="primary" open-type="getUserInfo" loading="{{loading}}" @getuserinfo="onGotUserInfo">{{t.button}}</button>
        <button class="welcome-btn-area-link" @tap="onGotUserInfo">{{t.skip_login}}</button>
      </view>
    </view>
    <feedback></feedback>
  </view>
</view>
</template>

<script>
import wepy from 'wepy';
import Feedback from '@/components/feedback';
import LocalesMixin from '@/mixins/locales-mixin';

export default class Welcome extends wepy.page {
  data = {
    loading: false,
    btnBottom: '60rpx'
  };

  components = {
    feedback: Feedback
  };

  mixins = [LocalesMixin];

  watch = {
    t() {
      wepy.setNavigationBarTitle({ title: this.t.title });
    }
  };

  methods = {
    async onGotUserInfo() {
      if (this.loading) return;
      this.loading = true;
      await this.$parent.login(true);
      this.loading = false;
      this.redirect();
    }
  };

  onLoad(options, { from }) {
    this.from = from;
    this.btnBottom = this.$parent.globalData.isIpx ? '118rpx' : '60rpx';
  }

  redirect() {
    if (this.from) {
      this.$redirect(
        this.from.$wxpage.route.split('pages/')[1],
        this.from.$wxpage.options
      );
    } else {
      this.$redirect('index');
    }
  }

  async openSetting() {
    const { authSetting } = await wepy.openSetting();
    if (authSetting['scope.userInfo']) {
      this.redirect();
    } else {
      await wepy.showModal({
        title: wepy.T._('common.title.grant_permission'),
        content: wepy.T._('common.content.grant_permission'),
        showCancel: false
      });
      this.openSetting();
    }
  }
}
</script>
