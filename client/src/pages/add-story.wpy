<style lang="less">
textarea {
  width: 100%;
  padding: 16rpx 0;
  font-size: 34rpx;
}

.textarea-wrp {
  background-color: #fff;
  border: 2rpx solid #d8d8d8;
}

.textarea-wrp {
  padding: 0 15rpx;
}
</style>
<template>
<view class="page">
  <view class="container">
    <view class="page-body">
      <form catchsubmit="formSubmit">
        <view class="page-section-title">{{t.story}}</view>
        <!-- <view class="page-section-title">Put your stories text here. Each line contains new story.</view> -->
        <view class="page-section">
          <view class="page-section-spacing">
            <view class="textarea-wrp">
              <textarea name="stories" auto-height value="{{stories}}" @input="onStoryChange" @blur="onStoriesBlur" />
            </view>
          </view>
        </view>
        <view class="btn-area">
          <button type="primary" formType="submit">{{t.add_button}}</button>
        </view>
      </form>
    </view>
    <feedback></feedback>
  </view>
</view>
</template>

<script>
import wepy from 'wepy';
import Feedback from '@/components/feedback';
import LocalesMixin from '@/mixins/locales-mixin';
import LoginMixin from '@/mixins/login-mixin';
import T from '@/utils/i18n';

let initStories;

export default class AddStory extends wepy.page {
  data = {
    stories: ''
  };

  components = {
    feedback: Feedback
  };

  mixins = [LocalesMixin, LoginMixin];

  methods = {
    onStoryChange(e) {
      this.stories = e.detail.value;
    },
    onStoriesBlur() {
      if (!this.stories || !this.stories.trim()) {
        this.stories = initStories;
      }
    },
    formSubmit(e) {
      const { stories } = e.detail.value;
      this.$parent.globalData.socket.emit('[Poker] add story', {
        id: this.id,
        storyNames: stories.trim().split('\n').map(name => name.trim()).filter(n => n)
      });
      wepy.navigateBack({ delta: 1 });
    }
  };

  watch = {
    t() {
      wepy.setNavigationBarTitle({ title: this.t.title });
    }
  };

  onLoad(options) {
    this.id = Number(options.id);
    const start = 1;
    initStories = new Array(3)
      .fill(null)
      .map((n, i) => `${T._('common.story')} 0${i + start}`)
      .join('\n');
    this.stories = initStories;
  }
}
</script>
