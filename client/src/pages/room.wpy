<style lang="less">
.top-stick {
  box-sizing: border-box;
  padding-left: 40rpx;
  padding-right: 40rpx;
  display: flex;
  align-items: center;
  font-size: 34rpx;
}

.top-stick-hd {
  flex: 1;
  margin-right: 20rpx;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.top-stick-bd {
  margin-right: 20rpx;
}

.top-stick-ft button {
  margin: 0;
  padding: 0;
  background-color: transparent;
  width: 38rpx;
  height: 38rpx;
}

.top-stick-ft button:after {
  border: 0;
}

.top-stick-ft image {
  width: 38rpx;
  height: 38rpx;
  display: block;
}

.top-stick-story .top-stick-hd {
  color: #0678c1;
  font-weight: 500;
}

.top-stick-story .top-stick-ft button {
  width: 90rpx;
  height: 78rpx;
  padding: 20rpx;
  margin-left: -20rpx;
  margin-right: -20rpx;
}

.top-stick-story .top-stick-ft image {
  width: 50rpx;
}

.top-stick + .container {
  padding-top: 100rpx;
}

.player-box, .story-box, .result-box {
  position: relative;
  background-color: #fff;
  border: 2rpx solid #d8d8d8;
  margin-bottom: 40rpx;
}

.player, .story, .result {
  box-sizing: border-box;
  position: relative;
  display: flex;
  align-items: center;
}

.player {
  padding: 20rpx 30rpx;
}

.player-hd {
  position: relative;
  margin-right: 20rpx;
  height: 92rpx;
}

.player-bd {
  flex: 1;
  font-size: 34rpx;
  font-weight: 500;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  padding-right: 20rpx;
}

.player-ft {
  position: relative;
}

.player-value {
  font-size: 40rpx;
  font-weight: 500;
  color: #0678c1;
}

.player-avatar {
  width: 93rpx;
  height: 93rpx;
  border-radius: 46.5rpx;
}

.story, .result {
  height: 88rpx;
  padding: 10rpx 30rpx;
}

.story-hd,
.story-bd,
.story-ft {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
  flex: 1;
}

.story-hd {
  font-weight: 500;
}

.story-bd {
  text-align: center;
}

.story-ft,
.result-ft {
  text-align: right;
  font-weight: 500;
  color: #0678c1;
}

.story-box-ft,
.result-box-ft {
  height: 132rpx;
  border-top: 2rpx solid #d8d8d8;
}

.story-box-ft .story-ft,
.result-box-ft .result-ft {
  font-size: 40rpx;
}

.result:active {
  background-color: #EEEEEE;
}

.result-bd {
  flex: 1;
  font-weight: 500;
}

.result-ft {
  margin-right: 40rpx;
}

.result-ft:after {
  content: " ";
  display: inline-block;
  height: 12rpx;
  width: 12rpx;
  border-width: 6rpx 6rpx 0 0;
  border-color: #9B9B9B;
  border-style: solid;
  transform: matrix(0.71, 0.71, -0.71, 0.71, 0, 0);
  position: absolute;
  top: 50%;
  margin-top: -8rpx;
  right: 28rpx;
}

.card-grids {
  position: relative;
  overflow: hidden;
  margin-left: -5rpx;
  margin-right: -5rpx;
  margin-top: 25rpx;
}

.card-grid {
  position: relative;
  float: left;
  width: 25%;
  box-sizing: border-box;
}

.card {
  border-radius: 10rpx;
  margin: 5rpx;
  padding: 5rpx 8rpx;
  height: 200rpx;
  position: relative;
  border: 2rpx solid #979797;
  background-color: #fff;
  transition: border 0.3s, box-shadow 0.3s;
}

.card-center {
  display: flex;
  align-items: center;
  justify-content: center;
  position: absolute;
  top: 30rpx;
  bottom: 30rpx;
  right: 20rpx;
  left: 20rpx;
  border: 2rpx solid #D8D8D8;
  background-color: #fff;
}

.card-center image {
  width: 72rpx;
  height: 72rpx;
}

.card.selected {
  border-color: #0678c1;
  box-shadow: 0 0 10rpx rgba(6, 120, 193, 1);
}

.card-left-corner, .card-right-corner {
  height: 23rpx;
  position: absolute;
    display: flex;
  align-items: center;
  justify-content: center;
}

.card-left-corner image,
.card-right-corner image {
  width: 25rpx;
  height: 25rpx;
}

.card-right-corner {
  right: 8rpx;
  bottom: 5rpx;
  transform: rotate(-180deg);
}
</style>
<template>
<view>
  <view class="top-stick" wx:if="{{init && isCompleted && isHost}}">
    <view class="top-stick-hd">{{t.continue_msg}}</view>
    <view class="top-stick-ft">
      <button @tap="onAddTap">
        <image src="/images/plus.png"></image>
      </button>
    </view>
  </view>
  <view class="top-stick top-stick-story" wx:if="{{init && !isCompleted}}">
    <view class="top-stick-hd">{{currentStory.name}}</view>
    <view class="top-stick-bd">{{currentStory.displayTimer}}</view>
    <view class="top-stick-ft">
      <button open-type="share">
        <image src="/images/user-plus.png"></image>
      </button>
    </view>
  </view>
  <view class="container" wx:if="{{init}}">
    <view class="page-body">
      <view class="page-section" wx:if="{{(!isHost || options.needScore) && !isCompleted}}">
        <view class="page-section-spacing">
          <view class="card-grids">
            <repeat class="card-grid" for="{{cards}}" index="key" item="card" key="key">
              <view class="card-grid">
                <card :card="card" :selectedCard="selectedCard"></card>
              </view>
            </repeat>
          </view>
        </view>
      </view>
      <view class="page-section-title" wx:if="{{!isCompleted}}">{{t.players}}</view>
      <view class="page-section" wx:if="{{!isCompleted}}">
        <view class="page-section-spacing">
          <view class="player-box" wx:if="{{currentStory.scores && currentStory.scores.length}}">
            <view class="player" wx:for="{{currentStory.scores}}" wx:for-item="score" wx:key="score.user.avatarUrl">
              <view class="player-hd">
                <image class="player-avatar" src="{{score.user.avatarUrl || '/images/user.png'}}"></image>
              </view>
              <view class="player-bd">
                {{score.user.nickName}}
              </view>
              <view class="player-ft">
                <view class="player-value" wx:if="{{score.displayCard && (isHost || options.isNoymous)}}">{{score.displayCard}}</view>
                <icon class="icon-small" wx:if="{{score.displayCard && !isHost && !options.isNoymous}}" type="success" size="23" color="#0678C1"></icon>
              </view>
            </view>
          </view>
        </view>
      </view>
      <view class="page-section-title" wx:if="{{!isCompleted && isHost}}">{{t.result_calc}}</view>
      <view class="page-section" wx:if="{{!isCompleted && isHost}}">
        <view class="page-section-spacing">
          <view class="result-box">
            <picker @change="onCalcMethodChange" value="{{options.calcMethod}}" range="{{calcMethods}}" range-key="key">
              <view class="result">
                <view class="result-bd">{{calcMethods[options.calcMethod].key}}</view>
                <view class="result-ft"></view>
              </view>
            </picker>
            <picker @change="onResultChange" value="{{currentScore}}" range="{{results}}">
              <view class="result result-box-ft">
                <view class="result-bd">{{t.result}}</view>
                <view class="result-ft">{{currentScore || currentScore === 0 ? results[currentScore] : ''}}</view>
              </view>
            </picker>
          </view>
        </view>
      </view>
      <view class="btn-area" wx:if="{{!isCompleted && isHost}}">
        <button type="primary" loading="{{loading}}" @tap="onSaveTap">{{t.save_next_button}}</button>
      </view>
      <view class="page-section-divide" wx:if="{{!isCompleted && isHost}}"></view>
      <view class="page-section-title" wx:if="{{stories && stories.length}}">{{t.all_stories}}</view>
      <view class="page-section" wx:if="{{stories && stories.length}}">
        <view class="page-section-spacing">
          <view class="story-box">
            <view class="story" wx:for="{{stories}}" wx:for-item="story" wx:key="story.index">
              <view class="story-hd">{{story.name}}</view>
              <view class="story-bd">{{story.displayTimer}}</view>
              <view class="story-ft">{{story.score || story.score === 0 ? story.score : ''}}</view>
            </view>
            <view class="story story-box-ft" wx:if="{{isCompleted}}">
              <view class="story-hd">{{storyCount + ' ' + (storyCount > 1 ? t.stories : t.story)}}</view>
              <view class="story-bd">{{displayTimerSum}}</view>
              <view class="story-ft">{{scoreSum}}</view>
            </view>
          </view>
        </view>
      </view>
      <view class="btn-area" wx:if="{{isCompleted}}">
        <button type="primary" @tap="onBackTap">{{t.finish_button}}</button>
      </view>
    </view>
  </view>
</view>
</template>

<script>
import wepy from 'wepy';
import io from '@/vendors/socket.io-mp-client/socket.io-mp';
import Card from '@/components/card';
import LocalesMixin from '@/mixins/locales-mixin';
import LoginMixin from '@/mixins/login-mixin';
import T from '@/utils/i18n';
import { calcMethods, cards, formatTimer, initResults } from '@/utils/utils';

export default class Room extends wepy.page {
  data = {
    init: false,
    cards,
    calcMethods,
    results: initResults,
    stories: null,
    currentScore: null,
    currentStory: null,
    selectedCard: null,
    options: null,
    loading: false,
    isHost: false,
    isCompleted: false,
    storyCount: 0,
    displayTimerSum: 0,
    scoreSum: 0
  };

  components = {
    card: Card
  };

  mixins = [LocalesMixin, LoginMixin];

  methods = {
    onAddTap() {
      this.$navigate(`add-story?id=${this.id}`);
    },
    onSaveTap() {
      if (this.loading) return;
      this.loading = true;
      this.socket.emit('next story', this.id);
    },
    onCalcMethodChange(e) {
      const calcMethod = parseInt(e.detail.value);
      this.socket.emit('calc method', { id: this.id, calcMethod });
    },
    onResultChange(e) {
      const currentScore = parseInt(e.detail.value);
      this.socket.emit('current score', { id: this.id, currentScore });
    },
    onBackTap() {
      if (getCurrentPages().length > 1) { // eslint-disable-line
        wepy.navigateBack({ delta: 1 });
      } else {
        this.$redirect('index');
      }
    }
  };

  watch = {
    t() {
      this.calcMethods.forEach(calc => {
        calc.key = T._(`common.calc_method.${calc.lang}`);
      });
      this.$apply();
    }
  }

  events = {
    'card-tap': (card) => {
      this.selectedCard = card.value === this.selectedCard ? null : card.value;
      this.socket.emit('select card', { id: this.id, card: this.selectedCard });
    }
  };

  socket = null;

  interval = null;

  onShareAppMessage() {
    return { title: this.name };
  }

  onLoad(options) {
    this.id = Number(options.id);

    const { socketUrl, socketPath } = wepy.$appConfig;

    if (!this.$parent.globalData.socket) {
      this.$parent.globalData.socket = io(socketUrl, {
        path: socketPath,
        transparent: ['websocket'],
        query: 'token=' + this.$parent.globalData.token
      });
    }

    this.socket = this.$parent.globalData.socket;

    this.socket.on('init', ({ id, ...payload }) => {
      if (id !== this.id) return;
      if (payload.stories && payload.stories.length) {
        payload.stories = payload.stories.filter(s => s.isCompleted && !s.isDeleted);
      }

      if (payload.currentStory) {
        const title = payload.name;
        wepy.setNavigationBarTitle({ title });
        this.init = true;
        for (const key in payload) {
          if (payload.hasOwnProperty(key)) {
            this[key] = payload[key];
          }
        }
        this.$apply();

        if (!this.interval) {
          this.interval = setInterval(() => {
            if (this.currentStory) {
              this.currentStory.timer++;
              this.currentStory.displayTimer = formatTimer(this.currentStory.timer);
              this.$apply();
            } else {
              clearInterval(this.interval);
              this.interval = null;
            }
          }, 1000);
        }
      } else {
        this.$parent.globalData.room = payload;
        this.$redirect(`room-detail?id=${id}`);
      }
    });

    this.socket.on('action', ({ id, ...payload }) => {
      if (id !== this.id) return;
      if (payload.stories && payload.stories.length) {
        payload.stories = payload.stories.filter(s => s.isCompleted && !s.isDeleted);
      }

      for (const key in payload) {
        if (payload.hasOwnProperty(key)) {
          this[key] = payload[key];
        }
      }
      this.$apply();

      if (payload.closed) {
        this.$redirect(`room-detail?id=${id}`);
      }

      if (!this.interval && payload.currentStory) {
        this.interval = setInterval(() => {
          if (this.currentStory) {
            this.currentStory.timer++;
            this.currentStory.displayTimer = formatTimer(this.currentStory.timer);
            this.$apply();
          } else {
            clearInterval(this.interval);
            this.interval = null;
          }
        }, 1000);
      }
    });

    this.socket.on('error', (content) => wepy.showModal({
      title: 'Error',
      content,
      showCancel: false,
      success: () => this.onBackTap()
    }));
  }

  onShow() {
    this.joinRoom();
  }

  onUnload() {
    this.leaveRoom();
  }

  onHide() {
    this.leaveRoom();
  }

  joinRoom() {
    this.socket.emit('join room', this.id);
  }

  leaveRoom() {
    this.socket.emit('leave room', this.id);
    if (this.interval) {
      clearInterval(this.interval);
      this.interval = null;
    }
  }
}

</script>
